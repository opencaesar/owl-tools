package io.opencaesar.closeworld;

import io.opencaesar.closeworld.ClassExpression.*;
import org.junit.*;

import java.util.Arrays;
import java.util.HashSet;

import static org.junit.Assert.*;

public class TestClassExpression {
	private ClassExpression a, b, c;
	private ClassExpression dc, ec, fc;
	private ClassExpression gmh, imj, kml;
	private ClassExpression min, oip, qir;
	private ClassExpression sut, uuv, wux;
	private ClassExpression empty;
	private ClassExpression universal;

	@BeforeClass public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass public static void tearDownAfterClass() throws Exception {
	}

	@Before public void setUp() throws Exception {
		a = new Unitary("a");
		b = new Unitary("a");
		c = new Unitary("b");
		dc = new Unitary("d").complement();
		ec = new Unitary("e").complement();
		fc = new Unitary("f").complement();
		gmh = new Unitary("g").difference(new Unitary("h"));;
		imj = new Unitary("i").difference(new Unitary("j"));;
		kml = new Unitary("k").difference(new Unitary("l"));;
		min = new Unitary("m").intersection(new Unitary("n"));;
		oip = new Unitary("o").intersection(new Unitary("p"));;
		qir = new Unitary("q").intersection(new Unitary("r"));;
		sut = new Unitary("s").union(new Unitary("t"));;
		uuv = new Unitary("u").union(new Unitary("v"));;
		wux = new Unitary("w").union(new Unitary("x"));;
		empty = new Empty();
		universal = new Universal();
	}

	@After public void tearDown() throws Exception {
	}

	@Test public void testEqual() {
		assertEquals(a, a);
		assertNotEquals(a, dc);
		assertNotEquals(a, gmh);
		assertNotEquals(a, min);
		assertNotEquals(a, sut);
		assertNotEquals(a, empty);
		assertNotEquals(a, universal);
		assertNotEquals(dc, a);
		assertEquals(dc, dc);
		assertNotEquals(dc, gmh);
		assertNotEquals(dc, min);
		assertNotEquals(dc, sut);
		assertNotEquals(dc, empty);
		assertNotEquals(dc, universal);
		assertNotEquals(gmh, a);
		assertNotEquals(gmh, dc);
		assertEquals(gmh, gmh);
		assertNotEquals(gmh, min);
		assertNotEquals(gmh, sut);
		assertNotEquals(gmh, empty);
		assertNotEquals(gmh, universal);
		assertNotEquals(min, a);
		assertNotEquals(min, dc);
		assertNotEquals(min, gmh);
		assertEquals(min, min);
		assertNotEquals(min, sut);
		assertNotEquals(min, empty);
		assertNotEquals(min, universal);
		assertNotEquals(sut, a);
		assertNotEquals(sut, dc);
		assertNotEquals(sut, gmh);
		assertNotEquals(sut, min);
		assertEquals(sut, sut);
		assertNotEquals(sut, empty);
		assertNotEquals(sut, universal);
		assertNotEquals(empty, a);
		assertNotEquals(empty, dc);
		assertNotEquals(empty, gmh);
		assertNotEquals(empty, min);
		assertNotEquals(empty, sut);
		assertEquals(empty, empty);
		assertNotEquals(empty, universal);
		assertNotEquals(universal, a);
		assertNotEquals(universal, dc);
		assertNotEquals(universal, gmh);
		assertNotEquals(universal, min);
		assertNotEquals(universal, sut);
		assertNotEquals(universal, empty);
		assertEquals(universal, universal);
	}

	// Theorem 1: For any class A, (A′)′ = A.

	@Test public void testTheorem01() {
		assertEquals(a, a.complement().complement());;
		assertEquals(dc, dc.complement().complement());;
		assertEquals(gmh, gmh.complement().complement());;
		assertEquals(min, min.complement().complement());;
		assertEquals(sut, sut.complement().complement());;
		assertEquals(empty, empty.complement().complement());;
		assertEquals(universal, universal.complement().complement());;
	}

	// Theorem 2: For any class A, A ∩ A = A.

	@Test public void testTheorem02() {
		assertEquals(a, a.intersection(a));;
		assertEquals(dc, dc.intersection(dc));;
		assertEquals(gmh, gmh.intersection(gmh));;
		assertEquals(min, min.intersection(min));;
		assertEquals(sut, sut.intersection(sut));;
		assertEquals(empty, empty.intersection(empty));;
		assertEquals(universal, universal.intersection(universal));;
	}

	// Theorem 3: For any classes A and B, A ∩ B = B ∩ A.

	@Test public void testTheorem03() {
		assertEquals(b.intersection(a), a.intersection(b));
		assertEquals(ec.intersection(a), a.intersection(ec));
		assertEquals(imj.intersection(a), a.intersection(imj));
		assertEquals(oip.intersection(a), a.intersection(oip));
		assertEquals(uuv.intersection(a), a.intersection(uuv));
		assertEquals(empty.intersection(a), a.intersection(empty));
		assertEquals(universal.intersection(a), a.intersection(universal));
		assertEquals(b.intersection(dc), dc.intersection(b));
		assertEquals(ec.intersection(dc), dc.intersection(ec));
		assertEquals(imj.intersection(dc), dc.intersection(imj));
		assertEquals(oip.intersection(dc), dc.intersection(oip));
		assertEquals(uuv.intersection(dc), dc.intersection(uuv));
		assertEquals(empty.intersection(dc), dc.intersection(empty));
		assertEquals(universal.intersection(dc), dc.intersection(universal));
		assertEquals(b.intersection(gmh), gmh.intersection(b));
		assertEquals(ec.intersection(gmh), gmh.intersection(ec));
		assertEquals(imj.intersection(gmh), gmh.intersection(imj));
		assertEquals(oip.intersection(gmh), gmh.intersection(oip));
		assertEquals(uuv.intersection(gmh), gmh.intersection(uuv));
		assertEquals(empty.intersection(gmh), gmh.intersection(empty));
		assertEquals(universal.intersection(gmh), gmh.intersection(universal));
		assertEquals(b.intersection(min), min.intersection(b));
		assertEquals(ec.intersection(min), min.intersection(ec));
		assertEquals(imj.intersection(min), min.intersection(imj));
		assertEquals(oip.intersection(min), min.intersection(oip));
		assertEquals(uuv.intersection(min), min.intersection(uuv));
		assertEquals(empty.intersection(min), min.intersection(empty));
		assertEquals(universal.intersection(min), min.intersection(universal));
		assertEquals(b.intersection(sut), sut.intersection(b));
		assertEquals(ec.intersection(sut), sut.intersection(ec));
		assertEquals(imj.intersection(sut), sut.intersection(imj));
		assertEquals(oip.intersection(sut), sut.intersection(oip));
		assertEquals(uuv.intersection(sut), sut.intersection(uuv));
		assertEquals(empty.intersection(sut), sut.intersection(empty));
		assertEquals(universal.intersection(sut), sut.intersection(universal));
		assertEquals(b.intersection(empty), empty.intersection(b));
		assertEquals(ec.intersection(empty), empty.intersection(ec));
		assertEquals(imj.intersection(empty), empty.intersection(imj));
		assertEquals(oip.intersection(empty), empty.intersection(oip));
		assertEquals(uuv.intersection(empty), empty.intersection(uuv));
		assertEquals(empty.intersection(empty), empty.intersection(empty));
		assertEquals(universal.intersection(empty), empty.intersection(universal));
		assertEquals(b.intersection(universal), universal.intersection(b));
		assertEquals(ec.intersection(universal), universal.intersection(ec));
		assertEquals(imj.intersection(universal), universal.intersection(imj));
		assertEquals(oip.intersection(universal), universal.intersection(oip));
		assertEquals(uuv.intersection(universal), universal.intersection(uuv));
		assertEquals(empty.intersection(universal), universal.intersection(empty));
		assertEquals(universal.intersection(universal), universal.intersection(universal));
	}

	// Theorem 4: For any classes A, B, and C, (A ∩ B) ∩ C = A ∩ (B ∩ C).

	@Test public void testTheorem04() {
		assertEquals(a.intersection(b.intersection(c)), (a.intersection(b)).intersection(c));
		assertEquals(a.intersection(b.intersection(fc)), (a.intersection(b)).intersection(fc));
		assertEquals(a.intersection(b.intersection(kml)), (a.intersection(b)).intersection(kml));
		assertEquals(a.intersection(b.intersection(qir)), (a.intersection(b)).intersection(qir));
		assertEquals(a.intersection(b.intersection(wux)), (a.intersection(b)).intersection(wux));
		assertEquals(a.intersection(b.intersection(empty)), (a.intersection(b)).intersection(empty));
		assertEquals(a.intersection(b.intersection(universal)), (a.intersection(b)).intersection(universal));
		assertEquals(a.intersection(ec.intersection(c)), (a.intersection(ec)).intersection(c));
		assertEquals(a.intersection(ec.intersection(fc)), (a.intersection(ec)).intersection(fc));
		assertEquals(a.intersection(ec.intersection(kml)), (a.intersection(ec)).intersection(kml));
		assertEquals(a.intersection(ec.intersection(qir)), (a.intersection(ec)).intersection(qir));
		assertEquals(a.intersection(ec.intersection(wux)), (a.intersection(ec)).intersection(wux));
		assertEquals(a.intersection(ec.intersection(empty)), (a.intersection(ec)).intersection(empty));
		assertEquals(a.intersection(ec.intersection(universal)), (a.intersection(ec)).intersection(universal));
		assertEquals(a.intersection(imj.intersection(c)), (a.intersection(imj)).intersection(c));
		assertEquals(a.intersection(imj.intersection(fc)), (a.intersection(imj)).intersection(fc));
		assertEquals(a.intersection(imj.intersection(kml)), (a.intersection(imj)).intersection(kml));
		assertEquals(a.intersection(imj.intersection(qir)), (a.intersection(imj)).intersection(qir));
		assertEquals(a.intersection(imj.intersection(wux)), (a.intersection(imj)).intersection(wux));
		assertEquals(a.intersection(imj.intersection(empty)), (a.intersection(imj)).intersection(empty));
		assertEquals(a.intersection(imj.intersection(universal)), (a.intersection(imj)).intersection(universal));
		assertEquals(a.intersection(oip.intersection(c)), (a.intersection(oip)).intersection(c));
		assertEquals(a.intersection(oip.intersection(fc)), (a.intersection(oip)).intersection(fc));
		assertEquals(a.intersection(oip.intersection(kml)), (a.intersection(oip)).intersection(kml));
		assertEquals(a.intersection(oip.intersection(qir)), (a.intersection(oip)).intersection(qir));
		assertEquals(a.intersection(oip.intersection(wux)), (a.intersection(oip)).intersection(wux));
		assertEquals(a.intersection(oip.intersection(empty)), (a.intersection(oip)).intersection(empty));
		assertEquals(a.intersection(oip.intersection(universal)), (a.intersection(oip)).intersection(universal));
		assertEquals(a.intersection(uuv.intersection(c)), (a.intersection(uuv)).intersection(c));
		assertEquals(a.intersection(uuv.intersection(fc)), (a.intersection(uuv)).intersection(fc));
		assertEquals(a.intersection(uuv.intersection(kml)), (a.intersection(uuv)).intersection(kml));
		assertEquals(a.intersection(uuv.intersection(qir)), (a.intersection(uuv)).intersection(qir));
		assertEquals(a.intersection(uuv.intersection(wux)), (a.intersection(uuv)).intersection(wux));
		assertEquals(a.intersection(uuv.intersection(empty)), (a.intersection(uuv)).intersection(empty));
		assertEquals(a.intersection(uuv.intersection(universal)), (a.intersection(uuv)).intersection(universal));
		assertEquals(a.intersection(empty.intersection(c)), (a.intersection(empty)).intersection(c));
		assertEquals(a.intersection(empty.intersection(fc)), (a.intersection(empty)).intersection(fc));
		assertEquals(a.intersection(empty.intersection(kml)), (a.intersection(empty)).intersection(kml));
		assertEquals(a.intersection(empty.intersection(qir)), (a.intersection(empty)).intersection(qir));
		assertEquals(a.intersection(empty.intersection(wux)), (a.intersection(empty)).intersection(wux));
		assertEquals(a.intersection(empty.intersection(empty)), (a.intersection(empty)).intersection(empty));
		assertEquals(a.intersection(empty.intersection(universal)), (a.intersection(empty)).intersection(universal));
		assertEquals(a.intersection(universal.intersection(c)), (a.intersection(universal)).intersection(c));
		assertEquals(a.intersection(universal.intersection(fc)), (a.intersection(universal)).intersection(fc));
		assertEquals(a.intersection(universal.intersection(kml)), (a.intersection(universal)).intersection(kml));
		assertEquals(a.intersection(universal.intersection(qir)), (a.intersection(universal)).intersection(qir));
		assertEquals(a.intersection(universal.intersection(wux)), (a.intersection(universal)).intersection(wux));
		assertEquals(a.intersection(universal.intersection(empty)), (a.intersection(universal)).intersection(empty));
		assertEquals(a.intersection(universal.intersection(universal)), (a.intersection(universal)).intersection(universal));
		assertEquals(dc.intersection(b.intersection(c)), (dc.intersection(b)).intersection(c));
		assertEquals(dc.intersection(b.intersection(fc)), (dc.intersection(b)).intersection(fc));
		assertEquals(dc.intersection(b.intersection(kml)), (dc.intersection(b)).intersection(kml));
		assertEquals(dc.intersection(b.intersection(qir)), (dc.intersection(b)).intersection(qir));
		assertEquals(dc.intersection(b.intersection(wux)), (dc.intersection(b)).intersection(wux));
		assertEquals(dc.intersection(b.intersection(empty)), (dc.intersection(b)).intersection(empty));
		assertEquals(dc.intersection(b.intersection(universal)), (dc.intersection(b)).intersection(universal));
		assertEquals(dc.intersection(ec.intersection(c)), (dc.intersection(ec)).intersection(c));
		assertEquals(dc.intersection(ec.intersection(fc)), (dc.intersection(ec)).intersection(fc));
		assertEquals(dc.intersection(ec.intersection(kml)), (dc.intersection(ec)).intersection(kml));
		assertEquals(dc.intersection(ec.intersection(qir)), (dc.intersection(ec)).intersection(qir));
		assertEquals(dc.intersection(ec.intersection(wux)), (dc.intersection(ec)).intersection(wux));
		assertEquals(dc.intersection(ec.intersection(empty)), (dc.intersection(ec)).intersection(empty));
		assertEquals(dc.intersection(ec.intersection(universal)), (dc.intersection(ec)).intersection(universal));
		assertEquals(dc.intersection(imj.intersection(c)), (dc.intersection(imj)).intersection(c));
		assertEquals(dc.intersection(imj.intersection(fc)), (dc.intersection(imj)).intersection(fc));
		assertEquals(dc.intersection(imj.intersection(kml)), (dc.intersection(imj)).intersection(kml));
		assertEquals(dc.intersection(imj.intersection(qir)), (dc.intersection(imj)).intersection(qir));
		assertEquals(dc.intersection(imj.intersection(wux)), (dc.intersection(imj)).intersection(wux));
		assertEquals(dc.intersection(imj.intersection(empty)), (dc.intersection(imj)).intersection(empty));
		assertEquals(dc.intersection(imj.intersection(universal)), (dc.intersection(imj)).intersection(universal));
		assertEquals(dc.intersection(oip.intersection(c)), (dc.intersection(oip)).intersection(c));
		assertEquals(dc.intersection(oip.intersection(fc)), (dc.intersection(oip)).intersection(fc));
		assertEquals(dc.intersection(oip.intersection(kml)), (dc.intersection(oip)).intersection(kml));
		assertEquals(dc.intersection(oip.intersection(qir)), (dc.intersection(oip)).intersection(qir));
		assertEquals(dc.intersection(oip.intersection(wux)), (dc.intersection(oip)).intersection(wux));
		assertEquals(dc.intersection(oip.intersection(empty)), (dc.intersection(oip)).intersection(empty));
		assertEquals(dc.intersection(oip.intersection(universal)), (dc.intersection(oip)).intersection(universal));
		assertEquals(dc.intersection(uuv.intersection(c)), (dc.intersection(uuv)).intersection(c));
		assertEquals(dc.intersection(uuv.intersection(fc)), (dc.intersection(uuv)).intersection(fc));
		assertEquals(dc.intersection(uuv.intersection(kml)), (dc.intersection(uuv)).intersection(kml));
		assertEquals(dc.intersection(uuv.intersection(qir)), (dc.intersection(uuv)).intersection(qir));
		assertEquals(dc.intersection(uuv.intersection(wux)), (dc.intersection(uuv)).intersection(wux));
		assertEquals(dc.intersection(uuv.intersection(empty)), (dc.intersection(uuv)).intersection(empty));
		assertEquals(dc.intersection(uuv.intersection(universal)), (dc.intersection(uuv)).intersection(universal));
		assertEquals(dc.intersection(empty.intersection(c)), (dc.intersection(empty)).intersection(c));
		assertEquals(dc.intersection(empty.intersection(fc)), (dc.intersection(empty)).intersection(fc));
		assertEquals(dc.intersection(empty.intersection(kml)), (dc.intersection(empty)).intersection(kml));
		assertEquals(dc.intersection(empty.intersection(qir)), (dc.intersection(empty)).intersection(qir));
		assertEquals(dc.intersection(empty.intersection(wux)), (dc.intersection(empty)).intersection(wux));
		assertEquals(dc.intersection(empty.intersection(empty)), (dc.intersection(empty)).intersection(empty));
		assertEquals(dc.intersection(empty.intersection(universal)), (dc.intersection(empty)).intersection(universal));
		assertEquals(dc.intersection(universal.intersection(c)), (dc.intersection(universal)).intersection(c));
		assertEquals(dc.intersection(universal.intersection(fc)), (dc.intersection(universal)).intersection(fc));
		assertEquals(dc.intersection(universal.intersection(kml)), (dc.intersection(universal)).intersection(kml));
		assertEquals(dc.intersection(universal.intersection(qir)), (dc.intersection(universal)).intersection(qir));
		assertEquals(dc.intersection(universal.intersection(wux)), (dc.intersection(universal)).intersection(wux));
		assertEquals(dc.intersection(universal.intersection(empty)), (dc.intersection(universal)).intersection(empty));
		assertEquals(dc.intersection(universal.intersection(universal)), (dc.intersection(universal)).intersection(universal));
		assertEquals(gmh.intersection(b.intersection(c)), (gmh.intersection(b)).intersection(c));
		assertEquals(gmh.intersection(b.intersection(fc)), (gmh.intersection(b)).intersection(fc));
		assertEquals(gmh.intersection(b.intersection(kml)), (gmh.intersection(b)).intersection(kml));
		assertEquals(gmh.intersection(b.intersection(qir)), (gmh.intersection(b)).intersection(qir));
		assertEquals(gmh.intersection(b.intersection(wux)), (gmh.intersection(b)).intersection(wux));
		assertEquals(gmh.intersection(b.intersection(empty)), (gmh.intersection(b)).intersection(empty));
		assertEquals(gmh.intersection(b.intersection(universal)), (gmh.intersection(b)).intersection(universal));
		assertEquals(gmh.intersection(ec.intersection(c)), (gmh.intersection(ec)).intersection(c));
		assertEquals(gmh.intersection(ec.intersection(fc)), (gmh.intersection(ec)).intersection(fc));
		assertEquals(gmh.intersection(ec.intersection(kml)), (gmh.intersection(ec)).intersection(kml));
		assertEquals(gmh.intersection(ec.intersection(qir)), (gmh.intersection(ec)).intersection(qir));
		assertEquals(gmh.intersection(ec.intersection(wux)), (gmh.intersection(ec)).intersection(wux));
		assertEquals(gmh.intersection(ec.intersection(empty)), (gmh.intersection(ec)).intersection(empty));
		assertEquals(gmh.intersection(ec.intersection(universal)), (gmh.intersection(ec)).intersection(universal));
		assertEquals(gmh.intersection(imj.intersection(c)), (gmh.intersection(imj)).intersection(c));
		assertEquals(gmh.intersection(imj.intersection(fc)), (gmh.intersection(imj)).intersection(fc));
		assertEquals(gmh.intersection(imj.intersection(kml)), (gmh.intersection(imj)).intersection(kml));
		assertEquals(gmh.intersection(imj.intersection(qir)), (gmh.intersection(imj)).intersection(qir));
		assertEquals(gmh.intersection(imj.intersection(wux)), (gmh.intersection(imj)).intersection(wux));
		assertEquals(gmh.intersection(imj.intersection(empty)), (gmh.intersection(imj)).intersection(empty));
		assertEquals(gmh.intersection(imj.intersection(universal)), (gmh.intersection(imj)).intersection(universal));
		assertEquals(gmh.intersection(oip.intersection(c)), (gmh.intersection(oip)).intersection(c));
		assertEquals(gmh.intersection(oip.intersection(fc)), (gmh.intersection(oip)).intersection(fc));
		assertEquals(gmh.intersection(oip.intersection(kml)), (gmh.intersection(oip)).intersection(kml));
		assertEquals(gmh.intersection(oip.intersection(qir)), (gmh.intersection(oip)).intersection(qir));
		assertEquals(gmh.intersection(oip.intersection(wux)), (gmh.intersection(oip)).intersection(wux));
		assertEquals(gmh.intersection(oip.intersection(empty)), (gmh.intersection(oip)).intersection(empty));
		assertEquals(gmh.intersection(oip.intersection(universal)), (gmh.intersection(oip)).intersection(universal));
		assertEquals(gmh.intersection(uuv.intersection(c)), (gmh.intersection(uuv)).intersection(c));
		assertEquals(gmh.intersection(uuv.intersection(fc)), (gmh.intersection(uuv)).intersection(fc));
		assertEquals(gmh.intersection(uuv.intersection(kml)), (gmh.intersection(uuv)).intersection(kml));
		assertEquals(gmh.intersection(uuv.intersection(qir)), (gmh.intersection(uuv)).intersection(qir));
		assertEquals(gmh.intersection(uuv.intersection(wux)), (gmh.intersection(uuv)).intersection(wux));
		assertEquals(gmh.intersection(uuv.intersection(empty)), (gmh.intersection(uuv)).intersection(empty));
		assertEquals(gmh.intersection(uuv.intersection(universal)), (gmh.intersection(uuv)).intersection(universal));
		assertEquals(gmh.intersection(empty.intersection(c)), (gmh.intersection(empty)).intersection(c));
		assertEquals(gmh.intersection(empty.intersection(fc)), (gmh.intersection(empty)).intersection(fc));
		assertEquals(gmh.intersection(empty.intersection(kml)), (gmh.intersection(empty)).intersection(kml));
		assertEquals(gmh.intersection(empty.intersection(qir)), (gmh.intersection(empty)).intersection(qir));
		assertEquals(gmh.intersection(empty.intersection(wux)), (gmh.intersection(empty)).intersection(wux));
		assertEquals(gmh.intersection(empty.intersection(empty)), (gmh.intersection(empty)).intersection(empty));
		assertEquals(gmh.intersection(empty.intersection(universal)), (gmh.intersection(empty)).intersection(universal));
		assertEquals(gmh.intersection(universal.intersection(c)), (gmh.intersection(universal)).intersection(c));
		assertEquals(gmh.intersection(universal.intersection(fc)), (gmh.intersection(universal)).intersection(fc));
		assertEquals(gmh.intersection(universal.intersection(kml)), (gmh.intersection(universal)).intersection(kml));
		assertEquals(gmh.intersection(universal.intersection(qir)), (gmh.intersection(universal)).intersection(qir));
		assertEquals(gmh.intersection(universal.intersection(wux)), (gmh.intersection(universal)).intersection(wux));
		assertEquals(gmh.intersection(universal.intersection(empty)), (gmh.intersection(universal)).intersection(empty));
		assertEquals(gmh.intersection(universal.intersection(universal)), (gmh.intersection(universal)).intersection(universal));
		assertEquals(min.intersection(b.intersection(c)), (min.intersection(b)).intersection(c));
		assertEquals(min.intersection(b.intersection(fc)), (min.intersection(b)).intersection(fc));
		assertEquals(min.intersection(b.intersection(kml)), (min.intersection(b)).intersection(kml));
		assertEquals(min.intersection(b.intersection(qir)), (min.intersection(b)).intersection(qir));
		assertEquals(min.intersection(b.intersection(wux)), (min.intersection(b)).intersection(wux));
		assertEquals(min.intersection(b.intersection(empty)), (min.intersection(b)).intersection(empty));
		assertEquals(min.intersection(b.intersection(universal)), (min.intersection(b)).intersection(universal));
		assertEquals(min.intersection(ec.intersection(c)), (min.intersection(ec)).intersection(c));
		assertEquals(min.intersection(ec.intersection(fc)), (min.intersection(ec)).intersection(fc));
		assertEquals(min.intersection(ec.intersection(kml)), (min.intersection(ec)).intersection(kml));
		assertEquals(min.intersection(ec.intersection(qir)), (min.intersection(ec)).intersection(qir));
		assertEquals(min.intersection(ec.intersection(wux)), (min.intersection(ec)).intersection(wux));
		assertEquals(min.intersection(ec.intersection(empty)), (min.intersection(ec)).intersection(empty));
		assertEquals(min.intersection(ec.intersection(universal)), (min.intersection(ec)).intersection(universal));
		assertEquals(min.intersection(imj.intersection(c)), (min.intersection(imj)).intersection(c));
		assertEquals(min.intersection(imj.intersection(fc)), (min.intersection(imj)).intersection(fc));
		assertEquals(min.intersection(imj.intersection(kml)), (min.intersection(imj)).intersection(kml));
		assertEquals(min.intersection(imj.intersection(qir)), (min.intersection(imj)).intersection(qir));
		assertEquals(min.intersection(imj.intersection(wux)), (min.intersection(imj)).intersection(wux));
		assertEquals(min.intersection(imj.intersection(empty)), (min.intersection(imj)).intersection(empty));
		assertEquals(min.intersection(imj.intersection(universal)), (min.intersection(imj)).intersection(universal));
		assertEquals(min.intersection(oip.intersection(c)), (min.intersection(oip)).intersection(c));
		assertEquals(min.intersection(oip.intersection(fc)), (min.intersection(oip)).intersection(fc));
		assertEquals(min.intersection(oip.intersection(kml)), (min.intersection(oip)).intersection(kml));
		assertEquals(min.intersection(oip.intersection(qir)), (min.intersection(oip)).intersection(qir));
		assertEquals(min.intersection(oip.intersection(wux)), (min.intersection(oip)).intersection(wux));
		assertEquals(min.intersection(oip.intersection(empty)), (min.intersection(oip)).intersection(empty));
		assertEquals(min.intersection(oip.intersection(universal)), (min.intersection(oip)).intersection(universal));
		assertEquals(min.intersection(uuv.intersection(c)), (min.intersection(uuv)).intersection(c));
		assertEquals(min.intersection(uuv.intersection(fc)), (min.intersection(uuv)).intersection(fc));
		assertEquals(min.intersection(uuv.intersection(kml)), (min.intersection(uuv)).intersection(kml));
		assertEquals(min.intersection(uuv.intersection(qir)), (min.intersection(uuv)).intersection(qir));
		assertEquals(min.intersection(uuv.intersection(wux)), (min.intersection(uuv)).intersection(wux));
		assertEquals(min.intersection(uuv.intersection(empty)), (min.intersection(uuv)).intersection(empty));
		assertEquals(min.intersection(uuv.intersection(universal)), (min.intersection(uuv)).intersection(universal));
		assertEquals(min.intersection(empty.intersection(c)), (min.intersection(empty)).intersection(c));
		assertEquals(min.intersection(empty.intersection(fc)), (min.intersection(empty)).intersection(fc));
		assertEquals(min.intersection(empty.intersection(kml)), (min.intersection(empty)).intersection(kml));
		assertEquals(min.intersection(empty.intersection(qir)), (min.intersection(empty)).intersection(qir));
		assertEquals(min.intersection(empty.intersection(wux)), (min.intersection(empty)).intersection(wux));
		assertEquals(min.intersection(empty.intersection(empty)), (min.intersection(empty)).intersection(empty));
		assertEquals(min.intersection(empty.intersection(universal)), (min.intersection(empty)).intersection(universal));
		assertEquals(min.intersection(universal.intersection(c)), (min.intersection(universal)).intersection(c));
		assertEquals(min.intersection(universal.intersection(fc)), (min.intersection(universal)).intersection(fc));
		assertEquals(min.intersection(universal.intersection(kml)), (min.intersection(universal)).intersection(kml));
		assertEquals(min.intersection(universal.intersection(qir)), (min.intersection(universal)).intersection(qir));
		assertEquals(min.intersection(universal.intersection(wux)), (min.intersection(universal)).intersection(wux));
		assertEquals(min.intersection(universal.intersection(empty)), (min.intersection(universal)).intersection(empty));
		assertEquals(min.intersection(universal.intersection(universal)), (min.intersection(universal)).intersection(universal));
		assertEquals(sut.intersection(b.intersection(c)), (sut.intersection(b)).intersection(c));
		assertEquals(sut.intersection(b.intersection(fc)), (sut.intersection(b)).intersection(fc));
		assertEquals(sut.intersection(b.intersection(kml)), (sut.intersection(b)).intersection(kml));
		assertEquals(sut.intersection(b.intersection(qir)), (sut.intersection(b)).intersection(qir));
		assertEquals(sut.intersection(b.intersection(wux)), (sut.intersection(b)).intersection(wux));
		assertEquals(sut.intersection(b.intersection(empty)), (sut.intersection(b)).intersection(empty));
		assertEquals(sut.intersection(b.intersection(universal)), (sut.intersection(b)).intersection(universal));
		assertEquals(sut.intersection(ec.intersection(c)), (sut.intersection(ec)).intersection(c));
		assertEquals(sut.intersection(ec.intersection(fc)), (sut.intersection(ec)).intersection(fc));
		assertEquals(sut.intersection(ec.intersection(kml)), (sut.intersection(ec)).intersection(kml));
		assertEquals(sut.intersection(ec.intersection(qir)), (sut.intersection(ec)).intersection(qir));
		assertEquals(sut.intersection(ec.intersection(wux)), (sut.intersection(ec)).intersection(wux));
		assertEquals(sut.intersection(ec.intersection(empty)), (sut.intersection(ec)).intersection(empty));
		assertEquals(sut.intersection(ec.intersection(universal)), (sut.intersection(ec)).intersection(universal));
		assertEquals(sut.intersection(imj.intersection(c)), (sut.intersection(imj)).intersection(c));
		assertEquals(sut.intersection(imj.intersection(fc)), (sut.intersection(imj)).intersection(fc));
		assertEquals(sut.intersection(imj.intersection(kml)), (sut.intersection(imj)).intersection(kml));
		assertEquals(sut.intersection(imj.intersection(qir)), (sut.intersection(imj)).intersection(qir));
		assertEquals(sut.intersection(imj.intersection(wux)), (sut.intersection(imj)).intersection(wux));
		assertEquals(sut.intersection(imj.intersection(empty)), (sut.intersection(imj)).intersection(empty));
		assertEquals(sut.intersection(imj.intersection(universal)), (sut.intersection(imj)).intersection(universal));
		assertEquals(sut.intersection(oip.intersection(c)), (sut.intersection(oip)).intersection(c));
		assertEquals(sut.intersection(oip.intersection(fc)), (sut.intersection(oip)).intersection(fc));
		assertEquals(sut.intersection(oip.intersection(kml)), (sut.intersection(oip)).intersection(kml));
		assertEquals(sut.intersection(oip.intersection(qir)), (sut.intersection(oip)).intersection(qir));
		assertEquals(sut.intersection(oip.intersection(wux)), (sut.intersection(oip)).intersection(wux));
		assertEquals(sut.intersection(oip.intersection(empty)), (sut.intersection(oip)).intersection(empty));
		assertEquals(sut.intersection(oip.intersection(universal)), (sut.intersection(oip)).intersection(universal));
		assertEquals(sut.intersection(uuv.intersection(c)), (sut.intersection(uuv)).intersection(c));
		assertEquals(sut.intersection(uuv.intersection(fc)), (sut.intersection(uuv)).intersection(fc));
		assertEquals(sut.intersection(uuv.intersection(kml)), (sut.intersection(uuv)).intersection(kml));
		assertEquals(sut.intersection(uuv.intersection(qir)), (sut.intersection(uuv)).intersection(qir));
		assertEquals(sut.intersection(uuv.intersection(wux)), (sut.intersection(uuv)).intersection(wux));
		assertEquals(sut.intersection(uuv.intersection(empty)), (sut.intersection(uuv)).intersection(empty));
		assertEquals(sut.intersection(uuv.intersection(universal)), (sut.intersection(uuv)).intersection(universal));
		assertEquals(sut.intersection(empty.intersection(c)), (sut.intersection(empty)).intersection(c));
		assertEquals(sut.intersection(empty.intersection(fc)), (sut.intersection(empty)).intersection(fc));
		assertEquals(sut.intersection(empty.intersection(kml)), (sut.intersection(empty)).intersection(kml));
		assertEquals(sut.intersection(empty.intersection(qir)), (sut.intersection(empty)).intersection(qir));
		assertEquals(sut.intersection(empty.intersection(wux)), (sut.intersection(empty)).intersection(wux));
		assertEquals(sut.intersection(empty.intersection(empty)), (sut.intersection(empty)).intersection(empty));
		assertEquals(sut.intersection(empty.intersection(universal)), (sut.intersection(empty)).intersection(universal));
		assertEquals(sut.intersection(universal.intersection(c)), (sut.intersection(universal)).intersection(c));
		assertEquals(sut.intersection(universal.intersection(fc)), (sut.intersection(universal)).intersection(fc));
		assertEquals(sut.intersection(universal.intersection(kml)), (sut.intersection(universal)).intersection(kml));
		assertEquals(sut.intersection(universal.intersection(qir)), (sut.intersection(universal)).intersection(qir));
		assertEquals(sut.intersection(universal.intersection(wux)), (sut.intersection(universal)).intersection(wux));
		assertEquals(sut.intersection(universal.intersection(empty)), (sut.intersection(universal)).intersection(empty));
		assertEquals(sut.intersection(universal.intersection(universal)), (sut.intersection(universal)).intersection(universal));
		assertEquals(empty.intersection(b.intersection(c)), (empty.intersection(b)).intersection(c));
		assertEquals(empty.intersection(b.intersection(fc)), (empty.intersection(b)).intersection(fc));
		assertEquals(empty.intersection(b.intersection(kml)), (empty.intersection(b)).intersection(kml));
		assertEquals(empty.intersection(b.intersection(qir)), (empty.intersection(b)).intersection(qir));
		assertEquals(empty.intersection(b.intersection(wux)), (empty.intersection(b)).intersection(wux));
		assertEquals(empty.intersection(b.intersection(empty)), (empty.intersection(b)).intersection(empty));
		assertEquals(empty.intersection(b.intersection(universal)), (empty.intersection(b)).intersection(universal));
		assertEquals(empty.intersection(ec.intersection(c)), (empty.intersection(ec)).intersection(c));
		assertEquals(empty.intersection(ec.intersection(fc)), (empty.intersection(ec)).intersection(fc));
		assertEquals(empty.intersection(ec.intersection(kml)), (empty.intersection(ec)).intersection(kml));
		assertEquals(empty.intersection(ec.intersection(qir)), (empty.intersection(ec)).intersection(qir));
		assertEquals(empty.intersection(ec.intersection(wux)), (empty.intersection(ec)).intersection(wux));
		assertEquals(empty.intersection(ec.intersection(empty)), (empty.intersection(ec)).intersection(empty));
		assertEquals(empty.intersection(ec.intersection(universal)), (empty.intersection(ec)).intersection(universal));
		assertEquals(empty.intersection(imj.intersection(c)), (empty.intersection(imj)).intersection(c));
		assertEquals(empty.intersection(imj.intersection(fc)), (empty.intersection(imj)).intersection(fc));
		assertEquals(empty.intersection(imj.intersection(kml)), (empty.intersection(imj)).intersection(kml));
		assertEquals(empty.intersection(imj.intersection(qir)), (empty.intersection(imj)).intersection(qir));
		assertEquals(empty.intersection(imj.intersection(wux)), (empty.intersection(imj)).intersection(wux));
		assertEquals(empty.intersection(imj.intersection(empty)), (empty.intersection(imj)).intersection(empty));
		assertEquals(empty.intersection(imj.intersection(universal)), (empty.intersection(imj)).intersection(universal));
		assertEquals(empty.intersection(oip.intersection(c)), (empty.intersection(oip)).intersection(c));
		assertEquals(empty.intersection(oip.intersection(fc)), (empty.intersection(oip)).intersection(fc));
		assertEquals(empty.intersection(oip.intersection(kml)), (empty.intersection(oip)).intersection(kml));
		assertEquals(empty.intersection(oip.intersection(qir)), (empty.intersection(oip)).intersection(qir));
		assertEquals(empty.intersection(oip.intersection(wux)), (empty.intersection(oip)).intersection(wux));
		assertEquals(empty.intersection(oip.intersection(empty)), (empty.intersection(oip)).intersection(empty));
		assertEquals(empty.intersection(oip.intersection(universal)), (empty.intersection(oip)).intersection(universal));
		assertEquals(empty.intersection(uuv.intersection(c)), (empty.intersection(uuv)).intersection(c));
		assertEquals(empty.intersection(uuv.intersection(fc)), (empty.intersection(uuv)).intersection(fc));
		assertEquals(empty.intersection(uuv.intersection(kml)), (empty.intersection(uuv)).intersection(kml));
		assertEquals(empty.intersection(uuv.intersection(qir)), (empty.intersection(uuv)).intersection(qir));
		assertEquals(empty.intersection(uuv.intersection(wux)), (empty.intersection(uuv)).intersection(wux));
		assertEquals(empty.intersection(uuv.intersection(empty)), (empty.intersection(uuv)).intersection(empty));
		assertEquals(empty.intersection(uuv.intersection(universal)), (empty.intersection(uuv)).intersection(universal));
		assertEquals(empty.intersection(empty.intersection(c)), (empty.intersection(empty)).intersection(c));
		assertEquals(empty.intersection(empty.intersection(fc)), (empty.intersection(empty)).intersection(fc));
		assertEquals(empty.intersection(empty.intersection(kml)), (empty.intersection(empty)).intersection(kml));
		assertEquals(empty.intersection(empty.intersection(qir)), (empty.intersection(empty)).intersection(qir));
		assertEquals(empty.intersection(empty.intersection(wux)), (empty.intersection(empty)).intersection(wux));
		assertEquals(empty.intersection(empty.intersection(empty)), (empty.intersection(empty)).intersection(empty));
		assertEquals(empty.intersection(empty.intersection(universal)), (empty.intersection(empty)).intersection(universal));
		assertEquals(empty.intersection(universal.intersection(c)), (empty.intersection(universal)).intersection(c));
		assertEquals(empty.intersection(universal.intersection(fc)), (empty.intersection(universal)).intersection(fc));
		assertEquals(empty.intersection(universal.intersection(kml)), (empty.intersection(universal)).intersection(kml));
		assertEquals(empty.intersection(universal.intersection(qir)), (empty.intersection(universal)).intersection(qir));
		assertEquals(empty.intersection(universal.intersection(wux)), (empty.intersection(universal)).intersection(wux));
		assertEquals(empty.intersection(universal.intersection(empty)), (empty.intersection(universal)).intersection(empty));
		assertEquals(empty.intersection(universal.intersection(universal)), (empty.intersection(universal)).intersection(universal));
		assertEquals(universal.intersection(b.intersection(c)), (universal.intersection(b)).intersection(c));
		assertEquals(universal.intersection(b.intersection(fc)), (universal.intersection(b)).intersection(fc));
		assertEquals(universal.intersection(b.intersection(kml)), (universal.intersection(b)).intersection(kml));
		assertEquals(universal.intersection(b.intersection(qir)), (universal.intersection(b)).intersection(qir));
		assertEquals(universal.intersection(b.intersection(wux)), (universal.intersection(b)).intersection(wux));
		assertEquals(universal.intersection(b.intersection(empty)), (universal.intersection(b)).intersection(empty));
		assertEquals(universal.intersection(b.intersection(universal)), (universal.intersection(b)).intersection(universal));
		assertEquals(universal.intersection(ec.intersection(c)), (universal.intersection(ec)).intersection(c));
		assertEquals(universal.intersection(ec.intersection(fc)), (universal.intersection(ec)).intersection(fc));
		assertEquals(universal.intersection(ec.intersection(kml)), (universal.intersection(ec)).intersection(kml));
		assertEquals(universal.intersection(ec.intersection(qir)), (universal.intersection(ec)).intersection(qir));
		assertEquals(universal.intersection(ec.intersection(wux)), (universal.intersection(ec)).intersection(wux));
		assertEquals(universal.intersection(ec.intersection(empty)), (universal.intersection(ec)).intersection(empty));
		assertEquals(universal.intersection(ec.intersection(universal)), (universal.intersection(ec)).intersection(universal));
		assertEquals(universal.intersection(imj.intersection(c)), (universal.intersection(imj)).intersection(c));
		assertEquals(universal.intersection(imj.intersection(fc)), (universal.intersection(imj)).intersection(fc));
		assertEquals(universal.intersection(imj.intersection(kml)), (universal.intersection(imj)).intersection(kml));
		assertEquals(universal.intersection(imj.intersection(qir)), (universal.intersection(imj)).intersection(qir));
		assertEquals(universal.intersection(imj.intersection(wux)), (universal.intersection(imj)).intersection(wux));
		assertEquals(universal.intersection(imj.intersection(empty)), (universal.intersection(imj)).intersection(empty));
		assertEquals(universal.intersection(imj.intersection(universal)), (universal.intersection(imj)).intersection(universal));
		assertEquals(universal.intersection(oip.intersection(c)), (universal.intersection(oip)).intersection(c));
		assertEquals(universal.intersection(oip.intersection(fc)), (universal.intersection(oip)).intersection(fc));
		assertEquals(universal.intersection(oip.intersection(kml)), (universal.intersection(oip)).intersection(kml));
		assertEquals(universal.intersection(oip.intersection(qir)), (universal.intersection(oip)).intersection(qir));
		assertEquals(universal.intersection(oip.intersection(wux)), (universal.intersection(oip)).intersection(wux));
		assertEquals(universal.intersection(oip.intersection(empty)), (universal.intersection(oip)).intersection(empty));
		assertEquals(universal.intersection(oip.intersection(universal)), (universal.intersection(oip)).intersection(universal));
		assertEquals(universal.intersection(uuv.intersection(c)), (universal.intersection(uuv)).intersection(c));
		assertEquals(universal.intersection(uuv.intersection(fc)), (universal.intersection(uuv)).intersection(fc));
		assertEquals(universal.intersection(uuv.intersection(kml)), (universal.intersection(uuv)).intersection(kml));
		assertEquals(universal.intersection(uuv.intersection(qir)), (universal.intersection(uuv)).intersection(qir));
		assertEquals(universal.intersection(uuv.intersection(wux)), (universal.intersection(uuv)).intersection(wux));
		assertEquals(universal.intersection(uuv.intersection(empty)), (universal.intersection(uuv)).intersection(empty));
		assertEquals(universal.intersection(uuv.intersection(universal)), (universal.intersection(uuv)).intersection(universal));
		assertEquals(universal.intersection(empty.intersection(c)), (universal.intersection(empty)).intersection(c));
		assertEquals(universal.intersection(empty.intersection(fc)), (universal.intersection(empty)).intersection(fc));
		assertEquals(universal.intersection(empty.intersection(kml)), (universal.intersection(empty)).intersection(kml));
		assertEquals(universal.intersection(empty.intersection(qir)), (universal.intersection(empty)).intersection(qir));
		assertEquals(universal.intersection(empty.intersection(wux)), (universal.intersection(empty)).intersection(wux));
		assertEquals(universal.intersection(empty.intersection(empty)), (universal.intersection(empty)).intersection(empty));
		assertEquals(universal.intersection(empty.intersection(universal)), (universal.intersection(empty)).intersection(universal));
		assertEquals(universal.intersection(universal.intersection(c)), (universal.intersection(universal)).intersection(c));
		assertEquals(universal.intersection(universal.intersection(fc)), (universal.intersection(universal)).intersection(fc));
		assertEquals(universal.intersection(universal.intersection(kml)), (universal.intersection(universal)).intersection(kml));
		assertEquals(universal.intersection(universal.intersection(qir)), (universal.intersection(universal)).intersection(qir));
		assertEquals(universal.intersection(universal.intersection(wux)), (universal.intersection(universal)).intersection(wux));
		assertEquals(universal.intersection(universal.intersection(empty)), (universal.intersection(universal)).intersection(empty));
		assertEquals(universal.intersection(universal.intersection(universal)), (universal.intersection(universal)).intersection(universal));
	}
	
	// Theorem 5: For any class A, A ∪ A = A.

	@Test public void testTheorem05() {
	    assertEquals(a, a.union(a));
	    assertEquals(dc, dc.union(dc));
	    assertEquals(gmh, gmh.union(gmh));
	    assertEquals(min, min.union(min));
	    assertEquals(sut, sut.union(sut));
	    assertEquals(empty, empty.union(empty));
	    assertEquals(universal, universal.union(universal));
	}

	// Theorem 6: For any classes A and B, A ∪ B = B ∪ A.
	
	@Test public void testTheorem06() {
		assertEquals(b.union(a), a.union(b));
		assertEquals(ec.union(a), a.union(ec));
		assertEquals(imj.union(a), a.union(imj));
		assertEquals(oip.union(a), a.union(oip));
		assertEquals(uuv.union(a), a.union(uuv));
		assertEquals(empty.union(a), a.union(empty));
		assertEquals(universal.union(a), a.union(universal));
		assertEquals(b.union(dc), dc.union(b));
		assertEquals(ec.union(dc), dc.union(ec));
		assertEquals(imj.union(dc), dc.union(imj));
		assertEquals(oip.union(dc), dc.union(oip));
		assertEquals(uuv.union(dc), dc.union(uuv));
		assertEquals(empty.union(dc), dc.union(empty));
		assertEquals(universal.union(dc), dc.union(universal));
		assertEquals(b.union(gmh), gmh.union(b));
		assertEquals(ec.union(gmh), gmh.union(ec));
		assertEquals(imj.union(gmh), gmh.union(imj));
		assertEquals(oip.union(gmh), gmh.union(oip));
		assertEquals(uuv.union(gmh), gmh.union(uuv));
		assertEquals(empty.union(gmh), gmh.union(empty));
		assertEquals(universal.union(gmh), gmh.union(universal));
		assertEquals(b.union(min), min.union(b));
		assertEquals(ec.union(min), min.union(ec));
		assertEquals(imj.union(min), min.union(imj));
		assertEquals(oip.union(min), min.union(oip));
		assertEquals(uuv.union(min), min.union(uuv));
		assertEquals(empty.union(min), min.union(empty));
		assertEquals(universal.union(min), min.union(universal));
		assertEquals(b.union(sut), sut.union(b));
		assertEquals(ec.union(sut), sut.union(ec));
		assertEquals(imj.union(sut), sut.union(imj));
		assertEquals(oip.union(sut), sut.union(oip));
		assertEquals(uuv.union(sut), sut.union(uuv));
		assertEquals(empty.union(sut), sut.union(empty));
		assertEquals(universal.union(sut), sut.union(universal));
		assertEquals(b.union(empty), empty.union(b));
		assertEquals(ec.union(empty), empty.union(ec));
		assertEquals(imj.union(empty), empty.union(imj));
		assertEquals(oip.union(empty), empty.union(oip));
		assertEquals(uuv.union(empty), empty.union(uuv));
		assertEquals(empty.union(empty), empty.union(empty));
		assertEquals(universal.union(empty), empty.union(universal));
		assertEquals(b.union(universal), universal.union(b));
		assertEquals(ec.union(universal), universal.union(ec));
		assertEquals(imj.union(universal), universal.union(imj));
		assertEquals(oip.union(universal), universal.union(oip));
		assertEquals(uuv.union(universal), universal.union(uuv));
		assertEquals(empty.union(universal), universal.union(empty));
		assertEquals(universal.union(universal), universal.union(universal));
	}

	// Theorem 7: For any classes A, B, and C, (A ∪ B) ∪ C = A ∪ (B ∪ C).
	
	@Test public void testTheorem07() {
		assertEquals(a.union(b.union(c)), (a.union(b)).union(c));
		assertEquals(a.union(b.union(fc)), (a.union(b)).union(fc));
		assertEquals(a.union(b.union(kml)), (a.union(b)).union(kml));
		assertEquals(a.union(b.union(qir)), (a.union(b)).union(qir));
		assertEquals(a.union(b.union(wux)), (a.union(b)).union(wux));
		assertEquals(a.union(b.union(empty)), (a.union(b)).union(empty));
		assertEquals(a.union(b.union(universal)), (a.union(b)).union(universal));
		assertEquals(a.union(ec.union(c)), (a.union(ec)).union(c));
		assertEquals(a.union(ec.union(fc)), (a.union(ec)).union(fc));
		assertEquals(a.union(ec.union(kml)), (a.union(ec)).union(kml));
		assertEquals(a.union(ec.union(qir)), (a.union(ec)).union(qir));
		assertEquals(a.union(ec.union(wux)), (a.union(ec)).union(wux));
		assertEquals(a.union(ec.union(empty)), (a.union(ec)).union(empty));
		assertEquals(a.union(ec.union(universal)), (a.union(ec)).union(universal));
		assertEquals(a.union(imj.union(c)), (a.union(imj)).union(c));
		assertEquals(a.union(imj.union(fc)), (a.union(imj)).union(fc));
		assertEquals(a.union(imj.union(kml)), (a.union(imj)).union(kml));
		assertEquals(a.union(imj.union(qir)), (a.union(imj)).union(qir));
		assertEquals(a.union(imj.union(wux)), (a.union(imj)).union(wux));
		assertEquals(a.union(imj.union(empty)), (a.union(imj)).union(empty));
		assertEquals(a.union(imj.union(universal)), (a.union(imj)).union(universal));
		assertEquals(a.union(oip.union(c)), (a.union(oip)).union(c));
		assertEquals(a.union(oip.union(fc)), (a.union(oip)).union(fc));
		assertEquals(a.union(oip.union(kml)), (a.union(oip)).union(kml));
		assertEquals(a.union(oip.union(qir)), (a.union(oip)).union(qir));
		assertEquals(a.union(oip.union(wux)), (a.union(oip)).union(wux));
		assertEquals(a.union(oip.union(empty)), (a.union(oip)).union(empty));
		assertEquals(a.union(oip.union(universal)), (a.union(oip)).union(universal));
		assertEquals(a.union(uuv.union(c)), (a.union(uuv)).union(c));
		assertEquals(a.union(uuv.union(fc)), (a.union(uuv)).union(fc));
		assertEquals(a.union(uuv.union(kml)), (a.union(uuv)).union(kml));
		assertEquals(a.union(uuv.union(qir)), (a.union(uuv)).union(qir));
		assertEquals(a.union(uuv.union(wux)), (a.union(uuv)).union(wux));
		assertEquals(a.union(uuv.union(empty)), (a.union(uuv)).union(empty));
		assertEquals(a.union(uuv.union(universal)), (a.union(uuv)).union(universal));
		assertEquals(a.union(empty.union(c)), (a.union(empty)).union(c));
		assertEquals(a.union(empty.union(fc)), (a.union(empty)).union(fc));
		assertEquals(a.union(empty.union(kml)), (a.union(empty)).union(kml));
		assertEquals(a.union(empty.union(qir)), (a.union(empty)).union(qir));
		assertEquals(a.union(empty.union(wux)), (a.union(empty)).union(wux));
		assertEquals(a.union(empty.union(empty)), (a.union(empty)).union(empty));
		assertEquals(a.union(empty.union(universal)), (a.union(empty)).union(universal));
		assertEquals(a.union(universal.union(c)), (a.union(universal)).union(c));
		assertEquals(a.union(universal.union(fc)), (a.union(universal)).union(fc));
		assertEquals(a.union(universal.union(kml)), (a.union(universal)).union(kml));
		assertEquals(a.union(universal.union(qir)), (a.union(universal)).union(qir));
		assertEquals(a.union(universal.union(wux)), (a.union(universal)).union(wux));
		assertEquals(a.union(universal.union(empty)), (a.union(universal)).union(empty));
		assertEquals(a.union(universal.union(universal)), (a.union(universal)).union(universal));
		assertEquals(dc.union(b.union(c)), (dc.union(b)).union(c));
		assertEquals(dc.union(b.union(fc)), (dc.union(b)).union(fc));
		assertEquals(dc.union(b.union(kml)), (dc.union(b)).union(kml));
		assertEquals(dc.union(b.union(qir)), (dc.union(b)).union(qir));
		assertEquals(dc.union(b.union(wux)), (dc.union(b)).union(wux));
		assertEquals(dc.union(b.union(empty)), (dc.union(b)).union(empty));
		assertEquals(dc.union(b.union(universal)), (dc.union(b)).union(universal));
		assertEquals(dc.union(ec.union(c)), (dc.union(ec)).union(c));
		assertEquals(dc.union(ec.union(fc)), (dc.union(ec)).union(fc));
		assertEquals(dc.union(ec.union(kml)), (dc.union(ec)).union(kml));
		assertEquals(dc.union(ec.union(qir)), (dc.union(ec)).union(qir));
		assertEquals(dc.union(ec.union(wux)), (dc.union(ec)).union(wux));
		assertEquals(dc.union(ec.union(empty)), (dc.union(ec)).union(empty));
		assertEquals(dc.union(ec.union(universal)), (dc.union(ec)).union(universal));
		assertEquals(dc.union(imj.union(c)), (dc.union(imj)).union(c));
		assertEquals(dc.union(imj.union(fc)), (dc.union(imj)).union(fc));
		assertEquals(dc.union(imj.union(kml)), (dc.union(imj)).union(kml));
		assertEquals(dc.union(imj.union(qir)), (dc.union(imj)).union(qir));
		assertEquals(dc.union(imj.union(wux)), (dc.union(imj)).union(wux));
		assertEquals(dc.union(imj.union(empty)), (dc.union(imj)).union(empty));
		assertEquals(dc.union(imj.union(universal)), (dc.union(imj)).union(universal));
		assertEquals(dc.union(oip.union(c)), (dc.union(oip)).union(c));
		assertEquals(dc.union(oip.union(fc)), (dc.union(oip)).union(fc));
		assertEquals(dc.union(oip.union(kml)), (dc.union(oip)).union(kml));
		assertEquals(dc.union(oip.union(qir)), (dc.union(oip)).union(qir));
		assertEquals(dc.union(oip.union(wux)), (dc.union(oip)).union(wux));
		assertEquals(dc.union(oip.union(empty)), (dc.union(oip)).union(empty));
		assertEquals(dc.union(oip.union(universal)), (dc.union(oip)).union(universal));
		assertEquals(dc.union(uuv.union(c)), (dc.union(uuv)).union(c));
		assertEquals(dc.union(uuv.union(fc)), (dc.union(uuv)).union(fc));
		assertEquals(dc.union(uuv.union(kml)), (dc.union(uuv)).union(kml));
		assertEquals(dc.union(uuv.union(qir)), (dc.union(uuv)).union(qir));
		assertEquals(dc.union(uuv.union(wux)), (dc.union(uuv)).union(wux));
		assertEquals(dc.union(uuv.union(empty)), (dc.union(uuv)).union(empty));
		assertEquals(dc.union(uuv.union(universal)), (dc.union(uuv)).union(universal));
		assertEquals(dc.union(empty.union(c)), (dc.union(empty)).union(c));
		assertEquals(dc.union(empty.union(fc)), (dc.union(empty)).union(fc));
		assertEquals(dc.union(empty.union(kml)), (dc.union(empty)).union(kml));
		assertEquals(dc.union(empty.union(qir)), (dc.union(empty)).union(qir));
		assertEquals(dc.union(empty.union(wux)), (dc.union(empty)).union(wux));
		assertEquals(dc.union(empty.union(empty)), (dc.union(empty)).union(empty));
		assertEquals(dc.union(empty.union(universal)), (dc.union(empty)).union(universal));
		assertEquals(dc.union(universal.union(c)), (dc.union(universal)).union(c));
		assertEquals(dc.union(universal.union(fc)), (dc.union(universal)).union(fc));
		assertEquals(dc.union(universal.union(kml)), (dc.union(universal)).union(kml));
		assertEquals(dc.union(universal.union(qir)), (dc.union(universal)).union(qir));
		assertEquals(dc.union(universal.union(wux)), (dc.union(universal)).union(wux));
		assertEquals(dc.union(universal.union(empty)), (dc.union(universal)).union(empty));
		assertEquals(dc.union(universal.union(universal)), (dc.union(universal)).union(universal));
		assertEquals(gmh.union(b.union(c)), (gmh.union(b)).union(c));
		assertEquals(gmh.union(b.union(fc)), (gmh.union(b)).union(fc));
		assertEquals(gmh.union(b.union(kml)), (gmh.union(b)).union(kml));
		assertEquals(gmh.union(b.union(qir)), (gmh.union(b)).union(qir));
		assertEquals(gmh.union(b.union(wux)), (gmh.union(b)).union(wux));
		assertEquals(gmh.union(b.union(empty)), (gmh.union(b)).union(empty));
		assertEquals(gmh.union(b.union(universal)), (gmh.union(b)).union(universal));
		assertEquals(gmh.union(ec.union(c)), (gmh.union(ec)).union(c));
		assertEquals(gmh.union(ec.union(fc)), (gmh.union(ec)).union(fc));
		assertEquals(gmh.union(ec.union(kml)), (gmh.union(ec)).union(kml));
		assertEquals(gmh.union(ec.union(qir)), (gmh.union(ec)).union(qir));
		assertEquals(gmh.union(ec.union(wux)), (gmh.union(ec)).union(wux));
		assertEquals(gmh.union(ec.union(empty)), (gmh.union(ec)).union(empty));
		assertEquals(gmh.union(ec.union(universal)), (gmh.union(ec)).union(universal));
		assertEquals(gmh.union(imj.union(c)), (gmh.union(imj)).union(c));
		assertEquals(gmh.union(imj.union(fc)), (gmh.union(imj)).union(fc));
		assertEquals(gmh.union(imj.union(kml)), (gmh.union(imj)).union(kml));
		assertEquals(gmh.union(imj.union(qir)), (gmh.union(imj)).union(qir));
		assertEquals(gmh.union(imj.union(wux)), (gmh.union(imj)).union(wux));
		assertEquals(gmh.union(imj.union(empty)), (gmh.union(imj)).union(empty));
		assertEquals(gmh.union(imj.union(universal)), (gmh.union(imj)).union(universal));
		assertEquals(gmh.union(oip.union(c)), (gmh.union(oip)).union(c));
		assertEquals(gmh.union(oip.union(fc)), (gmh.union(oip)).union(fc));
		assertEquals(gmh.union(oip.union(kml)), (gmh.union(oip)).union(kml));
		assertEquals(gmh.union(oip.union(qir)), (gmh.union(oip)).union(qir));
		assertEquals(gmh.union(oip.union(wux)), (gmh.union(oip)).union(wux));
		assertEquals(gmh.union(oip.union(empty)), (gmh.union(oip)).union(empty));
		assertEquals(gmh.union(oip.union(universal)), (gmh.union(oip)).union(universal));
		assertEquals(gmh.union(uuv.union(c)), (gmh.union(uuv)).union(c));
		assertEquals(gmh.union(uuv.union(fc)), (gmh.union(uuv)).union(fc));
		assertEquals(gmh.union(uuv.union(kml)), (gmh.union(uuv)).union(kml));
		assertEquals(gmh.union(uuv.union(qir)), (gmh.union(uuv)).union(qir));
		assertEquals(gmh.union(uuv.union(wux)), (gmh.union(uuv)).union(wux));
		assertEquals(gmh.union(uuv.union(empty)), (gmh.union(uuv)).union(empty));
		assertEquals(gmh.union(uuv.union(universal)), (gmh.union(uuv)).union(universal));
		assertEquals(gmh.union(empty.union(c)), (gmh.union(empty)).union(c));
		assertEquals(gmh.union(empty.union(fc)), (gmh.union(empty)).union(fc));
		assertEquals(gmh.union(empty.union(kml)), (gmh.union(empty)).union(kml));
		assertEquals(gmh.union(empty.union(qir)), (gmh.union(empty)).union(qir));
		assertEquals(gmh.union(empty.union(wux)), (gmh.union(empty)).union(wux));
		assertEquals(gmh.union(empty.union(empty)), (gmh.union(empty)).union(empty));
		assertEquals(gmh.union(empty.union(universal)), (gmh.union(empty)).union(universal));
		assertEquals(gmh.union(universal.union(c)), (gmh.union(universal)).union(c));
		assertEquals(gmh.union(universal.union(fc)), (gmh.union(universal)).union(fc));
		assertEquals(gmh.union(universal.union(kml)), (gmh.union(universal)).union(kml));
		assertEquals(gmh.union(universal.union(qir)), (gmh.union(universal)).union(qir));
		assertEquals(gmh.union(universal.union(wux)), (gmh.union(universal)).union(wux));
		assertEquals(gmh.union(universal.union(empty)), (gmh.union(universal)).union(empty));
		assertEquals(gmh.union(universal.union(universal)), (gmh.union(universal)).union(universal));
		assertEquals(min.union(b.union(c)), (min.union(b)).union(c));
		assertEquals(min.union(b.union(fc)), (min.union(b)).union(fc));
		assertEquals(min.union(b.union(kml)), (min.union(b)).union(kml));
		assertEquals(min.union(b.union(qir)), (min.union(b)).union(qir));
		assertEquals(min.union(b.union(wux)), (min.union(b)).union(wux));
		assertEquals(min.union(b.union(empty)), (min.union(b)).union(empty));
		assertEquals(min.union(b.union(universal)), (min.union(b)).union(universal));
		assertEquals(min.union(ec.union(c)), (min.union(ec)).union(c));
		assertEquals(min.union(ec.union(fc)), (min.union(ec)).union(fc));
		assertEquals(min.union(ec.union(kml)), (min.union(ec)).union(kml));
		assertEquals(min.union(ec.union(qir)), (min.union(ec)).union(qir));
		assertEquals(min.union(ec.union(wux)), (min.union(ec)).union(wux));
		assertEquals(min.union(ec.union(empty)), (min.union(ec)).union(empty));
		assertEquals(min.union(ec.union(universal)), (min.union(ec)).union(universal));
		assertEquals(min.union(imj.union(c)), (min.union(imj)).union(c));
		assertEquals(min.union(imj.union(fc)), (min.union(imj)).union(fc));
		assertEquals(min.union(imj.union(kml)), (min.union(imj)).union(kml));
		assertEquals(min.union(imj.union(qir)), (min.union(imj)).union(qir));
		assertEquals(min.union(imj.union(wux)), (min.union(imj)).union(wux));
		assertEquals(min.union(imj.union(empty)), (min.union(imj)).union(empty));
		assertEquals(min.union(imj.union(universal)), (min.union(imj)).union(universal));
		assertEquals(min.union(oip.union(c)), (min.union(oip)).union(c));
		assertEquals(min.union(oip.union(fc)), (min.union(oip)).union(fc));
		assertEquals(min.union(oip.union(kml)), (min.union(oip)).union(kml));
		assertEquals(min.union(oip.union(qir)), (min.union(oip)).union(qir));
		assertEquals(min.union(oip.union(wux)), (min.union(oip)).union(wux));
		assertEquals(min.union(oip.union(empty)), (min.union(oip)).union(empty));
		assertEquals(min.union(oip.union(universal)), (min.union(oip)).union(universal));
		assertEquals(min.union(uuv.union(c)), (min.union(uuv)).union(c));
		assertEquals(min.union(uuv.union(fc)), (min.union(uuv)).union(fc));
		assertEquals(min.union(uuv.union(kml)), (min.union(uuv)).union(kml));
		assertEquals(min.union(uuv.union(qir)), (min.union(uuv)).union(qir));
		assertEquals(min.union(uuv.union(wux)), (min.union(uuv)).union(wux));
		assertEquals(min.union(uuv.union(empty)), (min.union(uuv)).union(empty));
		assertEquals(min.union(uuv.union(universal)), (min.union(uuv)).union(universal));
		assertEquals(min.union(empty.union(c)), (min.union(empty)).union(c));
		assertEquals(min.union(empty.union(fc)), (min.union(empty)).union(fc));
		assertEquals(min.union(empty.union(kml)), (min.union(empty)).union(kml));
		assertEquals(min.union(empty.union(qir)), (min.union(empty)).union(qir));
		assertEquals(min.union(empty.union(wux)), (min.union(empty)).union(wux));
		assertEquals(min.union(empty.union(empty)), (min.union(empty)).union(empty));
		assertEquals(min.union(empty.union(universal)), (min.union(empty)).union(universal));
		assertEquals(min.union(universal.union(c)), (min.union(universal)).union(c));
		assertEquals(min.union(universal.union(fc)), (min.union(universal)).union(fc));
		assertEquals(min.union(universal.union(kml)), (min.union(universal)).union(kml));
		assertEquals(min.union(universal.union(qir)), (min.union(universal)).union(qir));
		assertEquals(min.union(universal.union(wux)), (min.union(universal)).union(wux));
		assertEquals(min.union(universal.union(empty)), (min.union(universal)).union(empty));
		assertEquals(min.union(universal.union(universal)), (min.union(universal)).union(universal));
		assertEquals(sut.union(b.union(c)), (sut.union(b)).union(c));
		assertEquals(sut.union(b.union(fc)), (sut.union(b)).union(fc));
		assertEquals(sut.union(b.union(kml)), (sut.union(b)).union(kml));
		assertEquals(sut.union(b.union(qir)), (sut.union(b)).union(qir));
		assertEquals(sut.union(b.union(wux)), (sut.union(b)).union(wux));
		assertEquals(sut.union(b.union(empty)), (sut.union(b)).union(empty));
		assertEquals(sut.union(b.union(universal)), (sut.union(b)).union(universal));
		assertEquals(sut.union(ec.union(c)), (sut.union(ec)).union(c));
		assertEquals(sut.union(ec.union(fc)), (sut.union(ec)).union(fc));
		assertEquals(sut.union(ec.union(kml)), (sut.union(ec)).union(kml));
		assertEquals(sut.union(ec.union(qir)), (sut.union(ec)).union(qir));
		assertEquals(sut.union(ec.union(wux)), (sut.union(ec)).union(wux));
		assertEquals(sut.union(ec.union(empty)), (sut.union(ec)).union(empty));
		assertEquals(sut.union(ec.union(universal)), (sut.union(ec)).union(universal));
		assertEquals(sut.union(imj.union(c)), (sut.union(imj)).union(c));
		assertEquals(sut.union(imj.union(fc)), (sut.union(imj)).union(fc));
		assertEquals(sut.union(imj.union(kml)), (sut.union(imj)).union(kml));
		assertEquals(sut.union(imj.union(qir)), (sut.union(imj)).union(qir));
		assertEquals(sut.union(imj.union(wux)), (sut.union(imj)).union(wux));
		assertEquals(sut.union(imj.union(empty)), (sut.union(imj)).union(empty));
		assertEquals(sut.union(imj.union(universal)), (sut.union(imj)).union(universal));
		assertEquals(sut.union(oip.union(c)), (sut.union(oip)).union(c));
		assertEquals(sut.union(oip.union(fc)), (sut.union(oip)).union(fc));
		assertEquals(sut.union(oip.union(kml)), (sut.union(oip)).union(kml));
		assertEquals(sut.union(oip.union(qir)), (sut.union(oip)).union(qir));
		assertEquals(sut.union(oip.union(wux)), (sut.union(oip)).union(wux));
		assertEquals(sut.union(oip.union(empty)), (sut.union(oip)).union(empty));
		assertEquals(sut.union(oip.union(universal)), (sut.union(oip)).union(universal));
		assertEquals(sut.union(uuv.union(c)), (sut.union(uuv)).union(c));
		assertEquals(sut.union(uuv.union(fc)), (sut.union(uuv)).union(fc));
		assertEquals(sut.union(uuv.union(kml)), (sut.union(uuv)).union(kml));
		assertEquals(sut.union(uuv.union(qir)), (sut.union(uuv)).union(qir));
		assertEquals(sut.union(uuv.union(wux)), (sut.union(uuv)).union(wux));
		assertEquals(sut.union(uuv.union(empty)), (sut.union(uuv)).union(empty));
		assertEquals(sut.union(uuv.union(universal)), (sut.union(uuv)).union(universal));
		assertEquals(sut.union(empty.union(c)), (sut.union(empty)).union(c));
		assertEquals(sut.union(empty.union(fc)), (sut.union(empty)).union(fc));
		assertEquals(sut.union(empty.union(kml)), (sut.union(empty)).union(kml));
		assertEquals(sut.union(empty.union(qir)), (sut.union(empty)).union(qir));
		assertEquals(sut.union(empty.union(wux)), (sut.union(empty)).union(wux));
		assertEquals(sut.union(empty.union(empty)), (sut.union(empty)).union(empty));
		assertEquals(sut.union(empty.union(universal)), (sut.union(empty)).union(universal));
		assertEquals(sut.union(universal.union(c)), (sut.union(universal)).union(c));
		assertEquals(sut.union(universal.union(fc)), (sut.union(universal)).union(fc));
		assertEquals(sut.union(universal.union(kml)), (sut.union(universal)).union(kml));
		assertEquals(sut.union(universal.union(qir)), (sut.union(universal)).union(qir));
		assertEquals(sut.union(universal.union(wux)), (sut.union(universal)).union(wux));
		assertEquals(sut.union(universal.union(empty)), (sut.union(universal)).union(empty));
		assertEquals(sut.union(universal.union(universal)), (sut.union(universal)).union(universal));
		assertEquals(empty.union(b.union(c)), (empty.union(b)).union(c));
		assertEquals(empty.union(b.union(fc)), (empty.union(b)).union(fc));
		assertEquals(empty.union(b.union(kml)), (empty.union(b)).union(kml));
		assertEquals(empty.union(b.union(qir)), (empty.union(b)).union(qir));
		assertEquals(empty.union(b.union(wux)), (empty.union(b)).union(wux));
		assertEquals(empty.union(b.union(empty)), (empty.union(b)).union(empty));
		assertEquals(empty.union(b.union(universal)), (empty.union(b)).union(universal));
		assertEquals(empty.union(ec.union(c)), (empty.union(ec)).union(c));
		assertEquals(empty.union(ec.union(fc)), (empty.union(ec)).union(fc));
		assertEquals(empty.union(ec.union(kml)), (empty.union(ec)).union(kml));
		assertEquals(empty.union(ec.union(qir)), (empty.union(ec)).union(qir));
		assertEquals(empty.union(ec.union(wux)), (empty.union(ec)).union(wux));
		assertEquals(empty.union(ec.union(empty)), (empty.union(ec)).union(empty));
		assertEquals(empty.union(ec.union(universal)), (empty.union(ec)).union(universal));
		assertEquals(empty.union(imj.union(c)), (empty.union(imj)).union(c));
		assertEquals(empty.union(imj.union(fc)), (empty.union(imj)).union(fc));
		assertEquals(empty.union(imj.union(kml)), (empty.union(imj)).union(kml));
		assertEquals(empty.union(imj.union(qir)), (empty.union(imj)).union(qir));
		assertEquals(empty.union(imj.union(wux)), (empty.union(imj)).union(wux));
		assertEquals(empty.union(imj.union(empty)), (empty.union(imj)).union(empty));
		assertEquals(empty.union(imj.union(universal)), (empty.union(imj)).union(universal));
		assertEquals(empty.union(oip.union(c)), (empty.union(oip)).union(c));
		assertEquals(empty.union(oip.union(fc)), (empty.union(oip)).union(fc));
		assertEquals(empty.union(oip.union(kml)), (empty.union(oip)).union(kml));
		assertEquals(empty.union(oip.union(qir)), (empty.union(oip)).union(qir));
		assertEquals(empty.union(oip.union(wux)), (empty.union(oip)).union(wux));
		assertEquals(empty.union(oip.union(empty)), (empty.union(oip)).union(empty));
		assertEquals(empty.union(oip.union(universal)), (empty.union(oip)).union(universal));
		assertEquals(empty.union(uuv.union(c)), (empty.union(uuv)).union(c));
		assertEquals(empty.union(uuv.union(fc)), (empty.union(uuv)).union(fc));
		assertEquals(empty.union(uuv.union(kml)), (empty.union(uuv)).union(kml));
		assertEquals(empty.union(uuv.union(qir)), (empty.union(uuv)).union(qir));
		assertEquals(empty.union(uuv.union(wux)), (empty.union(uuv)).union(wux));
		assertEquals(empty.union(uuv.union(empty)), (empty.union(uuv)).union(empty));
		assertEquals(empty.union(uuv.union(universal)), (empty.union(uuv)).union(universal));
		assertEquals(empty.union(empty.union(c)), (empty.union(empty)).union(c));
		assertEquals(empty.union(empty.union(fc)), (empty.union(empty)).union(fc));
		assertEquals(empty.union(empty.union(kml)), (empty.union(empty)).union(kml));
		assertEquals(empty.union(empty.union(qir)), (empty.union(empty)).union(qir));
		assertEquals(empty.union(empty.union(wux)), (empty.union(empty)).union(wux));
		assertEquals(empty.union(empty.union(empty)), (empty.union(empty)).union(empty));
		assertEquals(empty.union(empty.union(universal)), (empty.union(empty)).union(universal));
		assertEquals(empty.union(universal.union(c)), (empty.union(universal)).union(c));
		assertEquals(empty.union(universal.union(fc)), (empty.union(universal)).union(fc));
		assertEquals(empty.union(universal.union(kml)), (empty.union(universal)).union(kml));
		assertEquals(empty.union(universal.union(qir)), (empty.union(universal)).union(qir));
		assertEquals(empty.union(universal.union(wux)), (empty.union(universal)).union(wux));
		assertEquals(empty.union(universal.union(empty)), (empty.union(universal)).union(empty));
		assertEquals(empty.union(universal.union(universal)), (empty.union(universal)).union(universal));
		assertEquals(universal.union(b.union(c)), (universal.union(b)).union(c));
		assertEquals(universal.union(b.union(fc)), (universal.union(b)).union(fc));
		assertEquals(universal.union(b.union(kml)), (universal.union(b)).union(kml));
		assertEquals(universal.union(b.union(qir)), (universal.union(b)).union(qir));
		assertEquals(universal.union(b.union(wux)), (universal.union(b)).union(wux));
		assertEquals(universal.union(b.union(empty)), (universal.union(b)).union(empty));
		assertEquals(universal.union(b.union(universal)), (universal.union(b)).union(universal));
		assertEquals(universal.union(ec.union(c)), (universal.union(ec)).union(c));
		assertEquals(universal.union(ec.union(fc)), (universal.union(ec)).union(fc));
		assertEquals(universal.union(ec.union(kml)), (universal.union(ec)).union(kml));
		assertEquals(universal.union(ec.union(qir)), (universal.union(ec)).union(qir));
		assertEquals(universal.union(ec.union(wux)), (universal.union(ec)).union(wux));
		assertEquals(universal.union(ec.union(empty)), (universal.union(ec)).union(empty));
		assertEquals(universal.union(ec.union(universal)), (universal.union(ec)).union(universal));
		assertEquals(universal.union(imj.union(c)), (universal.union(imj)).union(c));
		assertEquals(universal.union(imj.union(fc)), (universal.union(imj)).union(fc));
		assertEquals(universal.union(imj.union(kml)), (universal.union(imj)).union(kml));
		assertEquals(universal.union(imj.union(qir)), (universal.union(imj)).union(qir));
		assertEquals(universal.union(imj.union(wux)), (universal.union(imj)).union(wux));
		assertEquals(universal.union(imj.union(empty)), (universal.union(imj)).union(empty));
		assertEquals(universal.union(imj.union(universal)), (universal.union(imj)).union(universal));
		assertEquals(universal.union(oip.union(c)), (universal.union(oip)).union(c));
		assertEquals(universal.union(oip.union(fc)), (universal.union(oip)).union(fc));
		assertEquals(universal.union(oip.union(kml)), (universal.union(oip)).union(kml));
		assertEquals(universal.union(oip.union(qir)), (universal.union(oip)).union(qir));
		assertEquals(universal.union(oip.union(wux)), (universal.union(oip)).union(wux));
		assertEquals(universal.union(oip.union(empty)), (universal.union(oip)).union(empty));
		assertEquals(universal.union(oip.union(universal)), (universal.union(oip)).union(universal));
		assertEquals(universal.union(uuv.union(c)), (universal.union(uuv)).union(c));
		assertEquals(universal.union(uuv.union(fc)), (universal.union(uuv)).union(fc));
		assertEquals(universal.union(uuv.union(kml)), (universal.union(uuv)).union(kml));
		assertEquals(universal.union(uuv.union(qir)), (universal.union(uuv)).union(qir));
		assertEquals(universal.union(uuv.union(wux)), (universal.union(uuv)).union(wux));
		assertEquals(universal.union(uuv.union(empty)), (universal.union(uuv)).union(empty));
		assertEquals(universal.union(uuv.union(universal)), (universal.union(uuv)).union(universal));
		assertEquals(universal.union(empty.union(c)), (universal.union(empty)).union(c));
		assertEquals(universal.union(empty.union(fc)), (universal.union(empty)).union(fc));
		assertEquals(universal.union(empty.union(kml)), (universal.union(empty)).union(kml));
		assertEquals(universal.union(empty.union(qir)), (universal.union(empty)).union(qir));
		assertEquals(universal.union(empty.union(wux)), (universal.union(empty)).union(wux));
		assertEquals(universal.union(empty.union(empty)), (universal.union(empty)).union(empty));
		assertEquals(universal.union(empty.union(universal)), (universal.union(empty)).union(universal));
		assertEquals(universal.union(universal.union(c)), (universal.union(universal)).union(c));
		assertEquals(universal.union(universal.union(fc)), (universal.union(universal)).union(fc));
		assertEquals(universal.union(universal.union(kml)), (universal.union(universal)).union(kml));
		assertEquals(universal.union(universal.union(qir)), (universal.union(universal)).union(qir));
		assertEquals(universal.union(universal.union(wux)), (universal.union(universal)).union(wux));
		assertEquals(universal.union(universal.union(empty)), (universal.union(universal)).union(empty));
		assertEquals(universal.union(universal.union(universal)), (universal.union(universal)).union(universal));
	}
	
}
