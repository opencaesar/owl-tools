apply plugin: 'application'
apply plugin: 'java-gradle-plugin'
apply plugin: 'java'

ext.title = 'OWL Gradle'
description = 'Gradle interfaces for owl tools'
mainClassName = 'io.opencaesar.owl.gradle.OwlLoadGradle'
applicationName = 'owl-gradle'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    compile project(':owl-load')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'log4j') {
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.+"
        }
    }
}


gradlePlugin {
	plugins {
		owlLoadPlugin {
			id = 'io.opencaesar.owl.load'
			implementationClass = 'io.opencaesar.owl.gradle.OwlLoadGradle'
		}
	}
}

/*
class GradlePlugin implements Plugin<Project> {
    void apply(Project project) {
		def extension = project.extensions.create('oml2owl', Oml2OwlExtension)
        project.getTasks().create("generateOwl").doLast [
	        def args = new ArrayList
		    args += #["-i", project.file(^extension.inputPath).absolutePath]
		    args += #["-o", project.file(^extension.outputPath).absolutePath]
		    if (^extension.disjointUnions) {
		    	args += "-u" 
		    }
		    if (^extension.annotationsOnAxioms) {
		    	args += "-a" 
		    }
		    if (^extension.debug) {
		    	args += "-d" 
		    }
	        App.main(args)
        ]
    }
}

class GradlePluginExtension {
	String s1
	String s2
}

// Apply the plugin
apply plugin: GradlePlugin
*/
